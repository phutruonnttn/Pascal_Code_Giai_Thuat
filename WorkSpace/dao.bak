const fi='dao.inp';
      fo='dao.out';
var n,m,u,v: longint;
    x,y: array[-1..100000] of longint;
    q,adj,tr,head: array[-1..100000] of longint;
    dd:array[-1..100000] of boolean;

procedure readf;
var i,j,k: longint;
begin
    assign(input,fi); reset(input);
    readln(n,m,u,v);
    for i:=1 to n do
     read(x[i],y[i]);
    close(input);
    head[1]:=0; k:=0;
    for i:=1 to n do
    begin
     for j:=i+1 to n do
     begin
        k:=k+1;
        adj[k]:=j;
     end;
     head[i+1]:=k;
    end;
end;

procedure BFS(kk: longint);
var q: array[1..10000] of longint;
    f,l,v,u,i,k: longint;
begin
    fillchar(dd,sizeof(dd),false);
    f:=1; l:=1; q[1]:=kk;
    dd[kk]:=true;
    repeat
     u:=q[f]; inc(f);
     write(u,#32);
     head[u]:=0;
     for i:=head[u]+1 to head[u+1] do
      begin
          k:=adj[i-1];
          v:=adj[i];
          if (dd[v]=false) and (sqrt(sqr(x[k]-x[v])+sqr(y[k]-y[v]))<m) then
           begin
               inc(l); q[l]:=v;
               dd[v]:=true;
               tr[v]:=u;
           end;
      end;
     until f>l;
end;

procedure writef;
var t: longint;
begin
    assign(output,fo); rewrite(output);
    BFS(u);
    if dd[v]= false then writeln('NO SOLUTION')
     else
      begin
          write(v,#32);
          while tr[t]<>u do
           begin
               write(tr[t],#32);
               t:=tr[t];
           end;
          write(u);
      end;
    close(output);
end;

begin
    readf;
    writef
end.